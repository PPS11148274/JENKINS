pipeline {
    agent any

    triggers {
        pollSCM('* * * * *') // Verifica cambios en el repositorio cada minuto
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                         branches: [[name: '*/main']],
                         userRemoteConfigs: [[url: 'https://github.com/PPS11148274/JENKINS.git']]
                ])
                echo 'Código descargado del repositorio'
            }
        }

        stage('Instalar Dependencias') {
            steps {
                sh 'python -m pip install --upgrade pip'
                sh 'pip install pylint pytest pytest-cov'
                echo 'Dependencias instaladas'
            }
        }

        stage('Análisis de Código') {
            steps {
                sh 'pylint calculadora.py || true' // Continúa aunque haya errores
                echo 'Análisis de código completado'
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/pylint_report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Pruebas Unitarias') {
            steps {
                sh 'python -m pytest test.py -v --cov=. --cov-report=xml'
                echo 'Pruebas unitarias ejecutadas'
            }
            post {
                always {
                    junit '**/test-reports/*.xml'
                    publishCoverage adapters: [coberturaAdapter('**/coverage.xml')]
                }
            }
        }

        stage('Ejecutar Aplicación') {
            steps {
                sh 'python calculadora.py --test' // Asume que has añadido un modo test
                echo 'Prueba de ejecución completada'
            }
        }
    }

    post {
        always {
            emailext (
                subject: "Resultado CI: ${currentBuild.fullDisplayName}",
                body: "Estado: ${currentBuild.result}\nURL: ${env.BUILD_URL}",
                to: 'tu-email@example.com',
                attachLog: true
            )
        }
        failure {
            slackSend channel: '#dev-notifications',
                      color: 'danger',
                      message: "Falló el build: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
        success {
            slackSend channel: '#dev-notifications',
                      color: 'good',
                      message: "Éxito en el build: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
    }
}